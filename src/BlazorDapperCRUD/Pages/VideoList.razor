@using BlazorDapperCRUD.Data
@page "/videolist"
@inject IVideoService VideoService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>VideoList</h3>
<p style="text-align: center">
    <a href="/videoaddedit/0">Add a video</a>
</p>
@if (videos == null)
{
    <p style="text-align: center">
        <img src="../images/loader.gif" />
    </p>
}
else
{
    <table>
        <tr>
            <th>Edit</th>
            <th>Video Title</th>
            <th>Date Published</th>
            <th>Is Active</th>
            <th>Delete</th>
        </tr>
        @foreach (var video in videos)
        {
            <tr>
                <td>
                    <!-- Calling videoaddedit with id configures page for Update of that table row -->
                    <a href="videoaddedit/@video.VideoID">
                        <img src="../images/iEdit.png" />
                    </a>
                </td>
                <td>@video.Title</td>
                <td>@video.DatePublished.ToShortDateString()</td>
                <td>

                    @if (video.IsActive)
                    {
                        <img src="../images/iGreenCheck.png" />
                    }
                    else
                    {

                        <img src="../images/iRedX.png" />
                    }
                </td>
                <td>
                    <!-- Calling videoaddedit with id configures page for Update of that table row -->

                    <img src="../images/iRedX.png" @onclick="(e => VideoDelete(e, video.VideoID))" />

                </td>
            </tr>
        }
    </table>
}

@code {
    IEnumerable<Video> videos;

    protected override async Task OnInitializedAsync()
    {
        videos = await VideoService.VideoList();
    }

    private async Task VideoDelete(MouseEventArgs e, int videoID)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete this record?"))
            return;

        await VideoService.VideoDelete(videoID);
        videos = await VideoService.VideoList();

    }


}
